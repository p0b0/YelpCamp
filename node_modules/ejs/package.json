{
  "_from": "ejs",
  "_id": "ejs@3.1.5",
  "_inBundle": false,
  "_integrity": "sha512-dldq3ZfFtgVTJMLjOe+/3sROTzALlL9E34V4/sDtUd/KlBSS0s6U1/+WPE1B4sj9CXHJpL1M6rhNJnc9Wbal9w==",
  "_location": "/ejs",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "ejs",
    "fetchSpec": "latest",
    "name": "ejs",
    "raw": "ejs",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/ejs/-/ejs-3.1.5.tgz",
  "_shasum": "aed723844dc20acb4b170cd9ab1017e476a0d93b",
  "_spec": "ejs",
  "_where": "C:\\Users\\win7\\Desktop\\yelpcamp",
  "author": {
    "email": "mde@fleegix.org",
    "name": "Matthew Eernisse",
    "url": "http://fleegix.org"
  },
  "bin": {
    "ejs": "bin/cli.js"
  },
  "bugs": {
    "url": "https://github.com/mde/ejs/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "jake": "^10.6.1"
  },
  "deprecated": false,
  "description": "Embedded JavaScript templates",
  "devDependencies": {
    "browserify": "^16.5.1",
    "eslint": "^6.8.0",
    "git-directory-deploy": "^1.5.1",
    "jsdoc": "^3.6.4",
    "lru-cache": "^4.0.1",
    "mocha": "^7.1.1",
    "uglify-js": "^3.3.16"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "homepage": "https://github.com/mde/ejs",
  "jsdelivr": "ejs.min.js",
  "keywords": [
    "ejs",
    "engine",
    "template"
  ],
  "license": "Apache-2.0",
  "main": "./lib/ejs.js",
  "name": "ejs",
  "optionalDependencies": {},
  "readme": "Embedded JavaScript templates<br/>\n[![Build Status](https://img.shields.io/travis/mde/ejs/master.svg?style=flat)](https://travis-ci.org/mde/ejs)\n[![Developing Dependencies](https://img.shields.io/david/dev/mde/ejs.svg?style=flat)](https://david-dm.org/mde/ejs?type=dev)\n[![Known Vulnerabilities](https://snyk.io/test/npm/ejs/badge.svg?style=flat)](https://snyk.io/test/npm/ejs)\n=============================\n\n## Installation\n\n```bash\n$ npm install ejs\n```\n\n## Features\n\n  * Control flow with `<% %>`\n  * Escaped output with `<%= %>` (escape function configurable)\n  * Unescaped raw output with `<%- %>`\n  * Newline-trim mode ('newline slurping') with `-%>` ending tag\n  * Whitespace-trim mode (slurp all whitespace) for control flow with `<%_ _%>`\n  * Custom delimiters (e.g. `[? ?]` instead of `<% %>`)\n  * Includes\n  * Client-side support\n  * Static caching of intermediate JavaScript\n  * Static caching of templates\n  * Complies with the [Express](http://expressjs.com) view system\n\n## Example\n\n```ejs\n<% if (user) { %>\n  <h2><%= user.name %></h2>\n<% } %>\n```\n\nTry EJS online at: https://ionicabizau.github.io/ejs-playground/.\n\n## Basic usage\n\n```javascript\nlet template = ejs.compile(str, options);\ntemplate(data);\n// => Rendered HTML string\n\nejs.render(str, data, options);\n// => Rendered HTML string\n\nejs.renderFile(filename, data, options, function(err, str){\n    // str => Rendered HTML string\n});\n```\n\nIt is also possible to use `ejs.render(dataAndOptions);` where you pass\neverything in a single object. In that case, you'll end up with local variables\nfor all the passed options. However, be aware that your code could break if we\nadd an option with the same name as one of your data object's properties.\nTherefore, we do not recommend using this shortcut.\n\n### Options\n\n  - `cache`                 Compiled functions are cached, requires `filename`\n  - `filename`              The name of the file being rendered. Not required if you\n    are using `renderFile()`. Used by `cache` to key caches, and for includes.\n  - `root`                  Set project root for includes with an absolute path (e.g, /file.ejs).\n    Can be array to try to resolve include from multiple directories.\n  - `views`                 An array of paths to use when resolving includes with relative paths.\n  - `context`               Function execution context\n  - `compileDebug`          When `false` no debug instrumentation is compiled\n  - `client`                When `true`, compiles a function that can be rendered\n    in the browser without needing to load the EJS Runtime\n    ([ejs.min.js](https://github.com/mde/ejs/releases/latest)).\n  - `delimiter`             Character to use for inner delimiter, by default '%'\n  - `openDelimiter`         Character to use for opening delimiter, by default '<'\n  - `closeDelimiter`        Character to use for closing delimiter, by default '>'\n  - `debug`                 Outputs generated function body\n  - `strict`                When set to `true`, generated function is in strict mode\n  - `_with`                 Whether or not to use `with() {}` constructs. If `false`\n    then the locals will be stored in the `locals` object. Set to `false` in strict mode.\n  - `destructuredLocals`    An array of local variables that are always destructured from\n    the locals object, available even in strict mode.\n  - `localsName`            Name to use for the object storing local variables when not using\n    `with` Defaults to `locals`\n  - `rmWhitespace`          Remove all safe-to-remove whitespace, including leading\n    and trailing whitespace. It also enables a safer version of `-%>` line\n    slurping for all scriptlet tags (it does not strip new lines of tags in\n    the middle of a line).\n  - `escape`                The escaping function used with `<%=` construct. It is\n    used in rendering and is `.toString()`ed in the generation of client functions.\n    (By default escapes XML).\n  - `outputFunctionName`    Set to a string (e.g., 'echo' or 'print') for a function to print\n    output inside scriptlet tags.\n  - `async`                 When `true`, EJS will use an async function for rendering. (Depends\n    on async/await support in the JS runtime.\n  - `includer`              Custom function to handle EJS includes, receives `(originalPath, parsedPath)`\n    parameters, where `originalPath` is the path in include as-is and `parsedPath` is the\n    previously resolved path. Should return an object `{ filename, template }`,\n    you may return only one of the properties, where `filename` is the final parsed path and `template`\n    is the included content.\n\nThis project uses [JSDoc](http://usejsdoc.org/). For the full public API\ndocumentation, clone the repository and run `npm run doc`. This will run JSDoc\nwith the proper options and output the documentation to `out/`. If you want\nthe both the public & private API docs, run `npm run devdoc` instead.\n\n### Tags\n\n  - `<%`              'Scriptlet' tag, for control-flow, no output\n  - `<%_`             'Whitespace Slurping' Scriptlet tag, strips all whitespace before it\n  - `<%=`             Outputs the value into the template (escaped)\n  - `<%-`             Outputs the unescaped value into the template\n  - `<%#`             Comment tag, no execution, no output\n  - `<%%`             Outputs a literal '<%'\n  - `%%>`             Outputs a literal '%>'\n  - `%>`              Plain ending tag\n  - `-%>`             Trim-mode ('newline slurp') tag, trims following newline\n  - `_%>`             'Whitespace Slurping' ending tag, removes all whitespace after it\n\nFor the full syntax documentation, please see [docs/syntax.md](https://github.com/mde/ejs/blob/master/docs/syntax.md).\n\n### Includes\n\nIncludes either have to be an absolute path, or, if not, are assumed as\nrelative to the template with the `include` call. For example if you are\nincluding `./views/user/show.ejs` from `./views/users.ejs` you would\nuse `<%- include('user/show') %>`.\n\nYou must specify the `filename` option for the template with the `include`\ncall unless you are using `renderFile()`.\n\nYou'll likely want to use the raw output tag (`<%-`) with your include to avoid\ndouble-escaping the HTML output.\n\n```ejs\n<ul>\n  <% users.forEach(function(user){ %>\n    <%- include('user/show', {user: user}) %>\n  <% }); %>\n</ul>\n```\n\nIncludes are inserted at runtime, so you can use variables for the path in the\n`include` call (for example `<%- include(somePath) %>`). Variables in your\ntop-level data object are available to all your includes, but local variables\nneed to be passed down.\n\nNOTE: Include preprocessor directives (`<% include user/show %>`) are\nnot supported in v3.0+.\n\n## Custom delimiters\n\nCustom delimiters can be applied on a per-template basis, or globally:\n\n```javascript\nlet ejs = require('ejs'),\n    users = ['geddy', 'neil', 'alex'];\n\n// Just one template\nejs.render('<p>[?= users.join(\" | \"); ?]</p>', {users: users}, {delimiter: '?', openDelimiter: '[', closeDelimiter: ']'});\n// => '<p>geddy | neil | alex</p>'\n\n// Or globally\nejs.delimiter = '?';\nejs.openDelimiter = '[';\nejs.closeDelimiter = ']';\nejs.render('<p>[?= users.join(\" | \"); ?]</p>', {users: users});\n// => '<p>geddy | neil | alex</p>'\n```\n\n### Caching\n\nEJS ships with a basic in-process cache for caching the intermediate JavaScript\nfunctions used to render templates. It's easy to plug in LRU caching using\nNode's `lru-cache` library:\n\n```javascript\nlet ejs = require('ejs'),\n    LRU = require('lru-cache');\nejs.cache = LRU(100); // LRU cache with 100-item limit\n```\n\nIf you want to clear the EJS cache, call `ejs.clearCache`. If you're using the\nLRU cache and need a different limit, simple reset `ejs.cache` to a new instance\nof the LRU.\n\n### Custom file loader\n\nThe default file loader is `fs.readFileSync`, if you want to customize it, you can set ejs.fileLoader.\n\n```javascript\nlet ejs = require('ejs');\nlet myFileLoad = function (filePath) {\n  return 'myFileLoad: ' + fs.readFileSync(filePath);\n};\n\nejs.fileLoader = myFileLoad;\n```\n\nWith this feature, you can preprocess the template before reading it.\n\n### Layouts\n\nEJS does not specifically support blocks, but layouts can be implemented by\nincluding headers and footers, like so:\n\n\n```ejs\n<%- include('header') -%>\n<h1>\n  Title\n</h1>\n<p>\n  My page\n</p>\n<%- include('footer') -%>\n```\n\n## Client-side support\n\nGo to the [Latest Release](https://github.com/mde/ejs/releases/latest), download\n`./ejs.js` or `./ejs.min.js`. Alternately, you can compile it yourself by cloning\nthe repository and running `jake build` (or `$(npm bin)/jake build` if jake is\nnot installed globally).\n\nInclude one of these files on your page, and `ejs` should be available globally.\n\n### Example\n\n```html\n<div id=\"output\"></div>\n<script src=\"ejs.min.js\"></script>\n<script>\n  let people = ['geddy', 'neil', 'alex'],\n      html = ejs.render('<%= people.join(\", \"); %>', {people: people});\n  // With jQuery:\n  $('#output').html(html);\n  // Vanilla JS:\n  document.getElementById('output').innerHTML = html;\n</script>\n```\n\n### Caveats\n\nMost of EJS will work as expected; however, there are a few things to note:\n\n1. Obviously, since you do not have access to the filesystem, `ejs.renderFile()` won't work.\n2. For the same reason, `include`s do not work unless you use an `include callback`. Here is an example:\n  ```javascript\n  let str = \"Hello <%= include('file', {person: 'John'}); %>\",\n      fn = ejs.compile(str, {client: true});\n\n  fn(data, null, function(path, d){ // include callback\n    // path -> 'file'\n    // d -> {person: 'John'}\n    // Put your code here\n    // Return the contents of file as a string\n  }); // returns rendered string\n  ```\n\nSee the [examples folder](https://github.com/mde/ejs/tree/master/examples) for more details.\n\n## CLI\n\nEJS ships with a full-featured CLI. Options are similar to those used in JavaScript code:\n\n  - `-o / --output-file FILE`            Write the rendered output to FILE rather than stdout.\n  - `-f / --data-file FILE`              Must be JSON-formatted. Use parsed input from FILE as data for rendering.\n  - `-i / --data-input STRING`           Must be JSON-formatted and URI-encoded. Use parsed input from STRING as data for rendering.\n  - `-m / --delimiter CHARACTER`         Use CHARACTER with angle brackets for open/close (defaults to %).\n  - `-p / --open-delimiter CHARACTER`    Use CHARACTER instead of left angle bracket to open.\n  - `-c / --close-delimiter CHARACTER`   Use CHARACTER instead of right angle bracket to close.\n  - `-s / --strict`                      When set to `true`, generated function is in strict mode\n  - `-n / --no-with`                     Use 'locals' object for vars rather than using `with` (implies --strict).\n  - `-l / --locals-name`                 Name to use for the object storing local variables when not using `with`.\n  - `-w / --rm-whitespace`               Remove all safe-to-remove whitespace, including leading and trailing whitespace.\n  - `-d / --debug`                       Outputs generated function body\n  - `-h / --help`                        Display this help message.\n  - `-V/v / --version`                   Display the EJS version.\n\nHere are some examples of usage:\n\n```shell\n$ ejs -p [ -c ] ./template_file.ejs -o ./output.html\n$ ejs ./test/fixtures/user.ejs name=Lerxst\n$ ejs -n -l _ ./some_template.ejs -f ./data_file.json\n```\n\n### Data input\n\nThere is a variety of ways to pass the CLI data for rendering.\n\nStdin:\n\n```shell\n$ ./test/fixtures/user_data.json | ejs ./test/fixtures/user.ejs\n$ ejs ./test/fixtures/user.ejs < test/fixtures/user_data.json\n```\n\nA data file:\n\n```shell\n$ ejs ./test/fixtures/user.ejs -f ./user_data.json\n```\n\nA command-line option (must be URI-encoded):\n\n```shell\n./bin/cli.js -i %7B%22name%22%3A%20%22foo%22%7D ./test/fixtures/user.ejs\n```\n\nOr, passing values directly at the end of the invocation:\n\n```shell\n./bin/cli.js -m $ ./test/fixtures/user.ejs name=foo\n```\n\n### Output\n\nThe CLI by default send output to stdout, but you can use the `-o` or `--output-file`\nflag to specify a target file to send the output to.\n\n## IDE Integration with Syntax Highlighting\n\nVSCode:Javascript EJS by *DigitalBrainstem*\n\n## Related projects\n\nThere are a number of implementations of EJS:\n\n * TJ's implementation, the v1 of this library: https://github.com/tj/ejs\n * EJS Embedded JavaScript Framework on Google Code: https://code.google.com/p/embeddedjavascript/\n * Sam Stephenson's Ruby implementation: https://rubygems.org/gems/ejs\n * Erubis, an ERB implementation which also runs JavaScript: http://www.kuwata-lab.com/erubis/users-guide.04.html#lang-javascript\n * DigitalBrainstem EJS Language support: https://github.com/Digitalbrainstem/ejs-grammar\n\n## License\n\nLicensed under the Apache License, Version 2.0\n(<http://www.apache.org/licenses/LICENSE-2.0>)\n\n- - -\nEJS Embedded JavaScript templates copyright 2112\nmde@fleegix.org.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/mde/ejs.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "unpkg": "ejs.min.js",
  "version": "3.1.5"
}
